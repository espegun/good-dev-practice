venv

Purpose
-------
Different projects may require different versions of packages. Using virtual environments such as venv gives the ability to control which packages should be included (avoid overcrow and exactly which versions of them. This reduces inconsistencies and increases reproducability.

How it works
------------
A virtual environment is basically a directory which contains the spesifications for a Python project and overruns PATH, i.e. where to look for interpreters and packages. venv's may be activated and deactivated. Generally, don't use Anaconda outside a container.

$ sudo apt-get install python3-venv  # If not installed on Ubuntu, install it
$ python3 -m venv .venv  # Creates the venv setup (a hidden dir .venv is a convention)
$ source .venv/bin/activate  # Activate the venv, now you can install packages inside it
$ echo $PATH  # Note that a new folder within the venv has been added first
$ pip install numpy==1.19  # Will be installed in the venv
$ pip freeze > requirements.txt  # Write all the packages installed in the venv to requirements.txt. The file may also be manually updated.
$ pip install -r requirements.txt  # Make installations from a requirements file (normally cloned from a repo), but create and acticate a venv first!
$ python3 main.py  # Just running a script in the venv
$ deactivate  # Deactivate the venv

You should add requirements.txt to source control, but not the venv itself (normally hidden in .venv).


Useful links and tutorials
--------------------------
https://docs.python.org/3/library/venv.html
https://medium.com/@peterchang_82818/python3-beginner-must-know-venv-fdbbd0421405  # Not good, but BASIC.
https://medium.com/swlh/a-guide-to-python-virtual-environments-8af34aa106ac <-- Very thorough. Should wrap your head around it.


